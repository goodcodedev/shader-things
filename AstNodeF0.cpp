#include "AstNode.hpp"

void Source::toStringF(std::string *str, int indent) {}
void Attribute::toStringF(std::string *str, int indent) {}
void Out::toStringF(std::string *str, int indent) {}
void In::toStringF(std::string *str, int indent) {}
void Uniform::toStringF(std::string *str, int indent) {}
void Block::toStringF(std::string *str, int indent) {}
void ArgDecl::toStringF(std::string *str, int indent) {}
void Function::toStringF(std::string *str, int indent) {}
void Return::toStringF(std::string *str, int indent) {}
void PrePostFix::toStringF(std::string *str, int indent) {}
void If::toStringF(std::string *str, int indent) {}
void ForLoop::toStringF(std::string *str, int indent) {}
void IntConst::toStringF(std::string *str, int indent) {}
void FloatConst::toStringF(std::string *str, int indent) {}
void Reference::toStringF(std::string *str, int indent) {}
void FieldReference::toStringF(std::string *str, int indent) {}
void BracedExpr::toStringF(std::string *str, int indent) {}
void Comparison::toStringF(std::string *str, int indent) {}
void MultiplyExpr::toStringF(std::string *str, int indent) {}
void DivideExpr::toStringF(std::string *str, int indent) {}
void PlusExpr::toStringF(std::string *str, int indent) {}
void MinusExpr::toStringF(std::string *str, int indent) {}
void FunctionCall::toStringF(std::string *str, int indent) {}
void TypeConstructor::toStringF(std::string *str, int indent) {}
void Assignment::toStringF(std::string *str, int indent) {}
void OpAssignment::toStringF(std::string *str, int indent) {}
void TypedAssignment::toStringF(std::string *str, int indent) {}
void StructMember::toStringF(std::string *str, int indent) {}
void StructDecl::toStringF(std::string *str, int indent) {}
void Version::toStringF(std::string *str, FormatState *f) {}